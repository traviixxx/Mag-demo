{{- $fullName := include "magnolia.fullname" . -}}
{{- $name := include "magnolia.name" . -}}
{{- $chartName := include "magnolia.chart" . -}}
{{- $release := .Release -}}
{{- $labels := include "magnolia.labels" . -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-postgres-conf" $.Release.Name }}
  namespace: {{ $.Release.Namespace }}
  labels:
{{ $labels | indent 4 }}
data:
  postgres.conf: |-
{{ tpl ($.Files.Get "files/archive-postgres.conf") . | indent 4 }}
---
{{- range list .Values.magnoliaAuthor .Values.magnoliaPublic nil (.Values.sharedDb.enabled | ternary .Values.sharedDb nil)  -}}
{{- if . -}}
{{- $appName := printf "%s-%s-db" $fullName .db.name -}}
{{- $dbName := printf "%s-db" .db.name }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $appName }}
  namespace: {{ $release.Namespace }}
  labels:
    {{- include "magnolia.labels" $ | nindent 4 }}
    component: {{ .db.name }}
    tier: database
spec:
  serviceName: {{ $appName }}
  replicas: {{ .replicas }}
  selector:
    matchLabels:
      {{- include "magnolia.labels" $ | nindent 6 }}
      component: {{ .db.name }}
      tier: database
  template:
    metadata:
      labels:
        {{- include "magnolia.labels" $ | nindent 8 }}
        component: {{ .db.name }}
        tier: database
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                - key: tier
                  operator: In
                  values:
                    - database
                - key: release
                  operator: In
                  values:
                    - {{ $.Release.Name }}
      securityContext:
        runAsUser: 70
        runAsGroup: 70
        fsGroup: 70
      initContainers:
        # Those init containers provide backward compatibility with older Helm chart releases
        - name: migration-helper
          image: "{{ .db.repository }}:{{ .db.tag }}"
          command:
            - "/bin/bash"
            - "-c"
            - |
              cd /var/lib/postgresql/data
              if [[ -d ./mydata && ! -f ./PG_VERSION ]]; then
                cp -R ./mydata/** .
                rm -rf ./mydata
              fi
              chown -R 70:70 .
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      {{- if .db.contentsync.enabled }}
        - name: contentsync
          image: {{ printf "%s:%s" .db.backup.image .db.backup.tag }}
          command:
            - /app
            - boot
            - --data-dir
            - /var/lib/postgresql/data
            - --service-name
            - {{ $appName }}
            - --loglevel
            - debug
          securityContext:
            runAsUser: 70
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            {{- if .db.contentsync.enabled }}
            - name: mtls-certs
              mountPath: /opt/tls
              readOnly: true
            {{- end }}
      {{- end }}
      containers:
        - name: {{ $dbName }}
          image: "{{ .db.repository }}:{{ .db.tag }}"
{{- if eq .db.type "postgres" }}
          {{- if .db.backup.enabled }}
          command:
          - "docker-entrypoint.sh"
          - "postgres"
          - "-c"
          - "config_file=/etc/postgresql/postgres.conf"
          {{- end }}
          env:
            - name: POSTGRES_DB
              value: "{{ .db.name }}"
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "trust"
            - name: PGDATA
              value: {{ .db.pgdata }}
{{- end }}
          {{- if and .db.restore.enabled (eq .db.type "postgres") }}
          lifecycle:
            postStart:
              exec:
                command:
                  - su
                  - -c
                  - sh
                  - -c
                  - psql -c "DROP DATABASE {{ .db.name }}" && wget {{ .db.restore.dump_url | quote }} -O - | gunzip | psql postgres
                  - postgres
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: archive
              mountPath: /archive
            {{- if .db.backup.enabled }}
            - name: postgres-conf
              mountPath: /etc/postgresql/postgres.conf
              subPath: postgres.conf
            {{- end }}
          readinessProbe:
            exec:
              command: ["psql", "-w", "-U", "postgres", "-d", "{{ .db.name }}", "-c", "SELECT 1"]
            initialDelaySeconds: 5
            timeoutSeconds: 2
{{- if .db.backup.enabled }}
        - name: backup
          image: {{ printf "%s:%s" .db.backup.image .db.backup.tag }}
          command:
            - /app
            - dump
            - --mode
            - server
            {{- if .db.contentsync.enabled }}
            - --tls-address
            - {{ .db.contentsync.address | quote }}
            {{- end }}
          {{- with .db.backup.env }}
          env:
{{ toYaml . | indent 12 }}
          {{- end }}
          volumeMounts:
            - name: archive
              mountPath: {{ .db.backup.pg_wal_archive }}
            - name: scratch
              mountPath: {{ .db.backup.pg_wal_scratch }}
            {{- if .db.contentsync.enabled }}
            - name: mtls-certs
              mountPath: "/opt/tls"
              readOnly: true
            {{- end }}
          {{- with .db.backup.volumeMounts }}
{{ toYaml . | indent 12 }}
          {{- end }}
{{- end }}
      volumes:
{{- if and .db.persistence.enabled .db.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .db.persistence.existingClaim }}
{{- else if not .db.persistence.enabled }}
        - name: data
          emptyDir: {}
{{- else if and .db.persistence.enabled (not .db.persistence.existingClaim) }}
        {{- if .db.backup.enabled }}
        - name: archive
          persistentVolumeClaim:
            claimName: archive
        - name: scratch
          emptyDir: {}
        - name: postgres-conf
          configMap:
            items:
              - key: postgres.conf
                mode: 420
                path: postgres.conf
            name: {{ $.Release.Name }}-postgres-conf
            optional: False
        {{- with .db.backup.volumes }}
{{ toYaml . | indent 8 }}
        {{- end }}
        {{- else }}
        - name: archive
          emptyDir: {}
        {{- end }}
        {{- if .db.contentsync.enabled }}
        - name: mtls-certs
          secret:
            secretName: {{ printf "%s-client-tls" $appName | quote }}
        {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: {{ $appName }}
          chart: {{ $chartName }}
          release: {{ $release.Name }}
          heritage: {{ $release.Service }}
          component: {{ .db.name }}
      spec:
        resources:
          requests:
            storage: {{ .db.persistence.size | default "10Gi" }}
        storageClassName: {{ .db.persistence.storageClassName | default "" }}
        accessModes:
      {{- if .db.persistence.accessModes }}
          {{- toYaml .db.persistence.accessModes | nindent 10 }}
      {{- else }}
          - ReadWriteOnce
      {{- end }}
    {{- if .db.backup.enabled }}
    - metadata:
        name: archive
        labels:
          app: {{ $appName }}
          chart: {{ $chartName }}
          release: {{ $release.Name }}
          heritage: {{ $release.Service }}
          component: {{ .db.name }}
      spec:
        resources:
          requests:
            storage: {{ .db.backup.pg_wal_archive_size | default "50Gi" }}
        storageClassName: {{ .db.backup.pg_wal_storageClassName | default "" }}
        accessModes:
          - ReadWriteOnce
    {{- end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $appName }}
  namespace: {{ $release.Namespace }}
  {{- if $.Values.service.annotations }}
  annotations:
    {{- toYaml $.Values.service.annotations | nindent 4 }}
  {{- end }}
spec:
  type: "{{ $.Values.service.type }}"
  clusterIP: None
  selector:
    {{- include "magnolia.labels" $ | nindent 4 }}
    component: {{ .db.name }}
    tier: database
  ports:
  {{- if eq .db.type "postgres" }}
  - name: postgres
    port: 5432
    protocol: TCP
    targetPort: 5432
  - name: backup
    port: 9999
    protocol: TCP
    targetPort: 9999
  - name: contentsync
    port: 9998
    protocol: TCP
    targetPort: 9998
  {{- end }}
{{- end }}
{{- end -}}
