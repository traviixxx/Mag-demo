{{- if $.Values.magnoliaPublic.db.contentsync.enabled -}}
{{- if $.Values.magnoliaPublic.db.enabled -}}
{{- $fullName := include "magnolia.fullname" . -}}
{{- $name := include "magnolia.name" . -}}
{{- $appName := printf "%s-%s-db" $fullName $.Values.magnoliaPublic.db.name -}}
# Create a self-signed issuer for our CA.
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: selfsigned-issuer
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "magnolia.labels" $ | nindent 4 }}
spec:
  selfSigned: {}
---
# Create a root certificate.
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: {{ $name }}-ca
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "magnolia.labels" $ | nindent 4 }}
spec:
  secretName: {{ $appName }}-ca-tls
  commonName: {{ $appName }}.svc.cluster.local
  usages:
    - server auth
    - client auth
  isCA: true
  duration: 87600h # 10y
  renewBefore: 1440h # 60d
  keyAlgorithm: ecdsa
  keySize: 256
  issuerRef:
    name: selfsigned-issuer
---
# This is our CA issuer.
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: {{ $name }}-ca-issuer
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "magnolia.labels" $ | nindent 4 }}
spec:
  ca:
    secretName: {{ $appName }}-ca-tls
---
# And this is our client cert used for all magnolia-backup clients to request
# new base backups on-demand.
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: {{ $name }}-cert
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "magnolia.labels" $ | nindent 4 }}
spec:
  secretName: {{ $appName }}-client-tls
  isCA: false
  usages:
    - server auth
    - client auth
  dnsNames:
  - "*.{{ $appName }}.{{ $.Release.Namespace }}.svc.cluster.local"
  - "*.{{ $appName }}.{{ $.Release.Namespace }}"
  - "*.{{ $appName }}"
  duration: 43800h # 5y
  renewBefore: 1440h # 60d
  keyAlgorithm: ecdsa
  keySize: 256
  issuerRef:
    name: {{ $name }}-ca-issuer

{{- end -}}
{{- end -}}