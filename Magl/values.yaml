
image:
  tomcat:
    repository: tomcat
    tag: 9-jdk11-corretto
    pullPolicy: IfNotPresent

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1

appimage:
  pullPolicy: Always
  pullSecrets:
  - name: gitlab
ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 512m
  enabled: true
  hosts:
  - host: [replace.with.hostname]
    paths:
    - instance: public
      path: /
    - instance: author
      path: /author
  tls:
  - hosts:
    - [replace.with.hostname]
    secretName: [replace-with-hostname-with-dashes]

# Values for Author    
magnoliaAuthor:
  activation:
    secret:
      key: activation-secret
      name: activation-key
    useExistingSecret: true
  bootstrap:
    password: superuser!
  contextPath: /author
  persistence:
    enabled: true
    existingClaim:
    size: 10Gi
    mountPath: /mgnl-home
    storageClassName: ""
  db:
    enabled: True
    repository: postgres
    tag: 11.9-alpine
    type: postgres
    name: author
    persistence:
      enabled: True
      size: 10Gi
      volumePermissions: true 
      mountPath: "/db"
      subPath: "data"
  env:
  - name: instance
    value: author
  - name: deployment
    value: base
  - name: magnolia.superuser.enabled
    value: "true"
  - name: magnolia.superuser.password
    value: superuser!
  - name: magnolia.bootstrap.license.owner
    value: "[replace with email]"
  - name: magnolia.bootstrap.license.key
    value: "[replace with key]"
  livenessProbe:
    enabled: true
  podAnnotations:
    magnolia.info/is-magnolia: "true"
  redeploy: true
  resources:
    limits:
      memory: 4Gi
    requests:
      memory: 4Gi
  restartPolicy: Always
  setenv:
    memory:
      maxPercentage: 80
  webarchive:
    repository: registry.magnolia-platform.com/developers-artifact/blueprints/demo-dx/magnolia-webapp
    tag: 462d6200

authorConfigmap:

  server: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
      Licensed to the Apache Software Foundation (ASF) under one or more
      contributor license agreements.  See the NOTICE file distributed with
      this work for additional information regarding copyright ownership.
      The ASF licenses this file to You under the Apache License, Version 2.0
      (the "License"); you may not use this file except in compliance with
      the License.  You may obtain a copy of the License at
    
          http://www.apache.org/licenses/LICENSE-2.0
    
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    -->
    <!-- Note:  A "Server" is not itself a "Container", so you may not
         define subcomponents such as "Valves" at this level.
         Documentation at /docs/config/server.html
     -->
    <!-- This file is managed by MiroNet, if you change it here, expect your changes to be overwritten. -->
    <Server port="-1" shutdown="SHUTDOWN">
      <Listener className="org.apache.catalina.startup.VersionLoggerListener"
                logArgs="false" />
      <!-- Security listener. Documentation at /docs/config/listeners.html
      <Listener className="org.apache.catalina.security.SecurityListener" />
      -->
      <!--APR library loader. Documentation at /docs/apr.html
      <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
      -->
      <!-- Prevent memory leaks due to use of particular java/javax APIs-->
      <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
      <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
      <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />
    
      <!-- Global JNDI resources
           Documentation at /docs/jndi-resources-howto.html
      -->
      <GlobalNamingResources>
         <Resource name="UserDatabase" auth="Container"
                   type="org.apache.catalina.UserDatabase"
                   description="User database that can be updated and saved"
                   factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                   pathname="conf/tomcat-users.xml" />
      </GlobalNamingResources>
    
      <Service name="Catalina">
    
        <!--The connectors can use a shared executor, you can define one or more named thread pools-->
        <Executor maxThreads="300"
                  minSpareThreads="50"
                  name="release-name-magnolia-helm-authorThreadPool"
                  namePrefix="release-name-magnolia-helm-author-http--" />
    
        <Connector acceptCount="100"
                   connectionTimeout="20000"
                   executor="release-name-magnolia-helm-authorThreadPool"
                   maxHttpHeaderSize="8192"
                   maxKeepAliveRequests="32"
                   port="8080"
                   protocol="org.apache.coyote.http11.Http11NioProtocol"
                   redirectPort="40168"
                   URIEncoding="UTF-8" />
        <!-- https connector for author and SSL/TLS in general -->
        <Connector acceptCount="100"
                   connectionTimeout="20000"
                   executor="release-name-magnolia-helm-authorThreadPool"
                   maxHttpHeaderSize="8192"
                   maxKeepAliveRequests="32"
                   port="8443"
                   protocol="org.apache.coyote.http11.Http11NioProtocol"
                   secure="true"
                   scheme="https"
                   proxyPort="443"
                   URIEncoding="UTF-8" />
    
        <Engine defaultHost="localhost" name="Catalina">
    
          <Realm className="org.apache.catalina.realm.LockOutRealm">
            <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                  resourceName="UserDatabase" />
          </Realm>
    
          <Host appBase="webapps"
                autoDeploy="false"
                deployOnStartup="false"
                deployXML="true"
                name="localhost"
                unpackWARs="false">
            <Context path="/author"
                     docBase="magnolia"
                     containerSciFilter="WsSci">
              <CookieProcessor sameSiteCookies="unset" />
            </Context>
    
            <Valve className="org.apache.catalina.valves.ErrorReportValve"
                   showReport="false"
                   showServerInfo="false" />
          </Host>
        </Engine>
      </Service>
    </Server>
    
  jackrabbit: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE Repository PUBLIC "-//The Apache Software Foundation//DTD Jackrabbit 2.0//EN" "http://jackrabbit.apache.org/dtd/repository-2.0.dtd">
    <Repository>
        <DataSources>
            <DataSource name="magnolia">
                <param name="driver" value="org.postgresql.Driver"/>
                <param name="url" value="jdbc:postgresql://release-name-magnolia-helm-author-db:5432/author"/>
                <param name="user" value="postgres"/>
                <param name="password" value=""/>
                <param name="databaseType" value="postgresql"/>
            </DataSource>
        </DataSources>
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${rep.home}/repository"/>
        </FileSystem>
        <Security appName="magnolia">
            <SecurityManager class="org.apache.jackrabbit.core.DefaultSecurityManager"/>
            <AccessManager class="org.apache.jackrabbit.core.security.DefaultAccessManager">
            </AccessManager>
            <!-- login module defined here is used by the repo to authenticate every request. not by the webapp to authenticate user against the webapp context (this one has to be passed before thing here gets invoked -->
            <LoginModule class="info.magnolia.jaas.sp.jcr.JackrabbitAuthenticationModule">
            </LoginModule>
        </Security>
        <DataStore class="org.apache.jackrabbit.core.data.db.DbDataStore">
            <param name="dataSourceName" value="magnolia"/>
            <param name="schemaObjectPrefix" value="ds_"/>
        </DataStore>
        <Workspaces rootPath="${rep.home}/workspaces" defaultWorkspace="default"/>
        <Workspace name="default">
            <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
                <param name="path" value="${wsp.home}/default"/>
            </FileSystem>
            <PersistenceManager class="org.apache.jackrabbit.core.persistence.pool.PostgreSQLPersistenceManager">
                <param name="dataSourceName" value="magnolia"/>
                <param name="schemaObjectPrefix" value="pm_${wsp.name}_"/>
            </PersistenceManager>
            <SearchIndex class="info.magnolia.jackrabbit.lucene.SearchIndex">
                <param name="path" value="${wsp.home}/index"/>
                <!-- SearchIndex will get the indexing configuration from the classpath, if not found in the workspace home -->
                <param name="indexingConfiguration" value="/info/magnolia/jackrabbit/indexing_configuration_${wsp.name}.xml"/>
                <param name="useCompoundFile" value="true"/>
                <param name="minMergeDocs" value="100"/>
                <param name="volatileIdleTime" value="3"/>
                <param name="maxMergeDocs" value="100000"/>
                <param name="mergeFactor" value="10"/>
                <param name="maxFieldLength" value="10000"/>
                <param name="bufferSize" value="10"/>
                <param name="cacheSize" value="1000"/>
                <param name="enableConsistencyCheck" value="false"/>
                <param name="forceConsistencyCheck" value="false"/>
                <param name="autoRepair" value="true"/>
                <param name="onWorkspaceInconsistency" value="log"/>
                <param name="queryClass" value="org.apache.jackrabbit.core.query.QueryImpl"/>
                <param name="respectDocumentOrder" value="true"/>
                <param name="resultFetchSize" value="100"/>
                <param name="extractorPoolSize" value="3"/>
                <param name="extractorTimeout" value="100"/>
                <param name="extractorBackLogSize" value="100"/>
                <!-- needed to highlight the searched term -->
                <param name="supportHighlighting" value="true"/>
                <!-- custom provider for getting an HTML excerpt in a query result with rep:excerpt() -->
                <param name="excerptProviderClass" value="info.magnolia.jackrabbit.lucene.SearchHTMLExcerpt"/>
            </SearchIndex>
            <WorkspaceSecurity>
                <AccessControlProvider class="info.magnolia.cms.core.MagnoliaAccessProvider"/>
            </WorkspaceSecurity>
        </Workspace>
        <Versioning rootPath="${rep.home}/version">
            <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
                <param name="path" value="${rep.home}/workspaces/version"/>
            </FileSystem>
            <PersistenceManager class="org.apache.jackrabbit.core.persistence.pool.PostgreSQLPersistenceManager">
                <param name="dataSourceName" value="magnolia"/>
                <param name="schemaObjectPrefix" value="version_"/>
            </PersistenceManager>
        </Versioning>
    </Repository>

  publishingcore: |-
    <?xml version="1.0" encoding="UTF-8"?><sv:node xmlns:sv="http://www.jcp.org/jcr/sv/1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" sv:name="magnoliaPublic8080"><
    sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:contentNode</sv:
    value></sv:property><sv:property sv:name="enabled" sv:type="String"><sv:value>true</sv
    :value></sv:property><sv:property sv:name="url" sv:type="String"><sv:value>
    http://public:8080/</sv:value></sv:property></sv:node>
  
  setenv: |-
    CLASSPATH="${EXTRA_LIBS}/*"
    
    CATALINA_OPTS="$CATALINA_OPTS \
     -server \
     -Djava.awt.headless=true \
     -Djava.security.egd=file:/dev/./urandom \
     -Dfile.encoding=UTF-8 \
     -Dsun.jnu.encoding=UTF-8 \
     -Duser.timezone=Europe/Zurich \
     -XX:+UseContainerSupport \
     -XX:MinRAMPercentage=${JVM_RAM_MIN_PERCENTAGE:-25} \
     -XX:MaxRAMPercentage=${JVM_RAM_MAX_PERCENTAGE:-80} \
     -XX:+UseG1GC \
     -XX:+UseStringDeduplication \
     -XX:G1ReservePercent=10 \
     -XX:ThreadStackSize=512k \
     -XX:+ExitOnOutOfMemoryError \
     -javaagent:${EXTRA_LIBS}/jmx_prometheus_javaagent.jar=8000:/jmxexporter/config.yml \
     -XshowSettings:vm"
    
    # -XX:+PrintFlagsFinal \
    
    # Magnolia settings
    CATALINA_OPTS="$CATALINA_OPTS \
     -Dmagnolia.repositories.jackrabbit.config=WEB-INF/config/repo-conf/jackrabbit.xml \
     -Dmagnolia.bootstrap.authorInstance=${MGNL_AUTHOR_INSTANCE:-true} \
     -Dmagnolia.develop=${MGNL_DEVELOPER_MODE:-false} \
     -Dmagnolia.update.auto=${MGNL_AUTO_UPDATE:-true} \
     -Dmagnolia.ui.sticker.color=${MGNL_UI_STICKER_COLOR:-blue} \
     -Dmagnolia.author.key.location=/keys/activation/magnolia-activation-keypair.properties \
     -Dmagnolia.home=${MGNL_HOME_DIR:-/mgnl-home} \
     -Dmagnolia.repositories.home=${MGNL_REPOSITORIES_HOME:-\$\{magnolia.home\}/repositories} \
     -Dmagnolia.resources.dir=${MGNL_RESOURCES_DIR:-\$\{magnolia.home\}/modules} \
     -Dmagnolia.cloud.bootstrapper.pem.file=${MGNL_HOME_DIR:-/mgnl-home}/pub.pem \
     -Dmagnolia.superuser.enabled=true"
    
    
    
    CATALINA_OPTS="$CATALINA_OPTS $CATALINA_OPTS_EXTRA"  
  
 # Values for public   
magnoliaPublic:
  activation:
    secret:
      key: activation-secret
      name: activation-key
    useExistingSecret: true
  bootstrap:
    password: superuser!
  contextPath: /
    persistence:
    enabled: True
    existingClaim:
    size: 10Gi
    mountPath: /mgnl-home
    storageClassName: ""
  db:
    enabled: True
    repository: postgres
    tag: 11.9-alpine
    type: postgres
    name: author
    persistence:
      enabled: True
      size: 10Gi
      volumePermissions: true 
      mountPath: "/db"
      subPath: "data"
  replicas: 1    
  env:
  - name: instance
    value: public
  - name: deployment
    value: base
  - name: magnolia.superuser.enabled
    value: "true"
  - name: magnolia.superuser.password
    value: superuser!
  - name: magnolia.bootstrap.license.owner
    value: "[replace with email]"
  - name: magnolia.bootstrap.license.key
    value: "[replace with key]"
  livenessProbe:
    enabled: true
  podAnnotations:
    magnolia.info/is-magnolia: "true"
  resources:
    limits:
      memory: 4Gi
    requests:
      memory: 4Gi
  restartPolicy: Always
  setenv:
    memory:
      maxPercentage: 80
  webarchive:
    repository: registry.magnolia-platform.com/developers-artifact/blueprints/demo-dx/magnolia-webapp
    tag: 462d6200

publicConfigmap:

  server: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
      Licensed to the Apache Software Foundation (ASF) under one or more
      contributor license agreements.  See the NOTICE file distributed with
      this work for additional information regarding copyright ownership.
      The ASF licenses this file to You under the Apache License, Version 2.0
      (the "License"); you may not use this file except in compliance with
      the License.  You may obtain a copy of the License at
    
          http://www.apache.org/licenses/LICENSE-2.0
    
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    -->
    <!-- Note:  A "Server" is not itself a "Container", so you may not
         define subcomponents such as "Valves" at this level.
         Documentation at /docs/config/server.html
     -->
    <!-- This file is managed by MiroNet, if you change it here, expect your changes to be overwritten. -->
    <Server port="-1" shutdown="SHUTDOWN">
      <Listener className="org.apache.catalina.startup.VersionLoggerListener"
                logArgs="false" />
      <!-- Security listener. Documentation at /docs/config/listeners.html
      <Listener className="org.apache.catalina.security.SecurityListener" />
      -->
      <!--APR library loader. Documentation at /docs/apr.html
      <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
      -->
      <!-- Prevent memory leaks due to use of particular java/javax APIs-->
      <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
      <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
      <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />
    
      <!-- Global JNDI resources
           Documentation at /docs/jndi-resources-howto.html
      -->
      <GlobalNamingResources>
         <Resource name="UserDatabase" auth="Container"
                   type="org.apache.catalina.UserDatabase"
                   description="User database that can be updated and saved"
                   factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                   pathname="conf/tomcat-users.xml" />
      </GlobalNamingResources>
    
      <Service name="Catalina">
    
        <!--The connectors can use a shared executor, you can define one or more named thread pools-->
        <Executor maxThreads="300"
                  minSpareThreads="50"
                  name="release-name-magnolia-helm-authorThreadPool"
                  namePrefix="release-name-magnolia-helm-author-http--" />
    
        <Connector acceptCount="100"
                   connectionTimeout="20000"
                   executor="release-name-magnolia-helm-authorThreadPool"
                   maxHttpHeaderSize="8192"
                   maxKeepAliveRequests="32"
                   port="8080"
                   protocol="org.apache.coyote.http11.Http11NioProtocol"
                   redirectPort="40168"
                   URIEncoding="UTF-8" />
        <!-- https connector for author and SSL/TLS in general -->
        <Connector acceptCount="100"
                   connectionTimeout="20000"
                   executor="release-name-magnolia-helm-authorThreadPool"
                   maxHttpHeaderSize="8192"
                   maxKeepAliveRequests="32"
                   port="8443"
                   protocol="org.apache.coyote.http11.Http11NioProtocol"
                   secure="true"
                   scheme="https"
                   proxyPort="443"
                   URIEncoding="UTF-8" />
    
        <Engine defaultHost="localhost" name="Catalina">
    
          <Realm className="org.apache.catalina.realm.LockOutRealm">
            <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                  resourceName="UserDatabase" />
          </Realm>
    
          <Host appBase="webapps"
                autoDeploy="false"
                deployOnStartup="false"
                deployXML="true"
                name="localhost"
                unpackWARs="false">
            <Context path="/author"
                     docBase="magnolia"
                     containerSciFilter="WsSci">
              <CookieProcessor sameSiteCookies="unset" />
            </Context>
    
            <Valve className="org.apache.catalina.valves.ErrorReportValve"
                   showReport="false"
                   showServerInfo="false" />
          </Host>
        </Engine>
      </Service>
    </Server>
    
  jackrabbit: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE Repository PUBLIC "-//The Apache Software Foundation//DTD Jackrabbit 2.0//EN" "http://jackrabbit.apache.org/dtd/repository-2.0.dtd">
    <Repository>
        <DataSources>
            <DataSource name="magnolia">
                <param name="driver" value="org.postgresql.Driver"/>
                <param name="url" value="jdbc:postgresql://release-name-magnolia-helm-author-db:5432/author"/>
                <param name="user" value="postgres"/>
                <param name="password" value=""/>
                <param name="databaseType" value="postgresql"/>
            </DataSource>
        </DataSources>
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${rep.home}/repository"/>
        </FileSystem>
        <Security appName="magnolia">
            <SecurityManager class="org.apache.jackrabbit.core.DefaultSecurityManager"/>
            <AccessManager class="org.apache.jackrabbit.core.security.DefaultAccessManager">
            </AccessManager>
            <!-- login module defined here is used by the repo to authenticate every request. not by the webapp to authenticate user against the webapp context (this one has to be passed before thing here gets invoked -->
            <LoginModule class="info.magnolia.jaas.sp.jcr.JackrabbitAuthenticationModule">
            </LoginModule>
        </Security>
        <DataStore class="org.apache.jackrabbit.core.data.db.DbDataStore">
            <param name="dataSourceName" value="magnolia"/>
            <param name="schemaObjectPrefix" value="ds_"/>
        </DataStore>
        <Workspaces rootPath="${rep.home}/workspaces" defaultWorkspace="default"/>
        <Workspace name="default">
            <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
                <param name="path" value="${wsp.home}/default"/>
            </FileSystem>
            <PersistenceManager class="org.apache.jackrabbit.core.persistence.pool.PostgreSQLPersistenceManager">
                <param name="dataSourceName" value="magnolia"/>
                <param name="schemaObjectPrefix" value="pm_${wsp.name}_"/>
            </PersistenceManager>
            <SearchIndex class="info.magnolia.jackrabbit.lucene.SearchIndex">
                <param name="path" value="${wsp.home}/index"/>
                <!-- SearchIndex will get the indexing configuration from the classpath, if not found in the workspace home -->
                <param name="indexingConfiguration" value="/info/magnolia/jackrabbit/indexing_configuration_${wsp.name}.xml"/>
                <param name="useCompoundFile" value="true"/>
                <param name="minMergeDocs" value="100"/>
                <param name="volatileIdleTime" value="3"/>
                <param name="maxMergeDocs" value="100000"/>
                <param name="mergeFactor" value="10"/>
                <param name="maxFieldLength" value="10000"/>
                <param name="bufferSize" value="10"/>
                <param name="cacheSize" value="1000"/>
                <param name="enableConsistencyCheck" value="false"/>
                <param name="forceConsistencyCheck" value="false"/>
                <param name="autoRepair" value="true"/>
                <param name="onWorkspaceInconsistency" value="log"/>
                <param name="queryClass" value="org.apache.jackrabbit.core.query.QueryImpl"/>
                <param name="respectDocumentOrder" value="true"/>
                <param name="resultFetchSize" value="100"/>
                <param name="extractorPoolSize" value="3"/>
                <param name="extractorTimeout" value="100"/>
                <param name="extractorBackLogSize" value="100"/>
                <!-- needed to highlight the searched term -->
                <param name="supportHighlighting" value="true"/>
                <!-- custom provider for getting an HTML excerpt in a query result with rep:excerpt() -->
                <param name="excerptProviderClass" value="info.magnolia.jackrabbit.lucene.SearchHTMLExcerpt"/>
            </SearchIndex>
            <WorkspaceSecurity>
                <AccessControlProvider class="info.magnolia.cms.core.MagnoliaAccessProvider"/>
            </WorkspaceSecurity>
        </Workspace>
        <Versioning rootPath="${rep.home}/version">
            <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
                <param name="path" value="${rep.home}/workspaces/version"/>
            </FileSystem>
            <PersistenceManager class="org.apache.jackrabbit.core.persistence.pool.PostgreSQLPersistenceManager">
                <param name="dataSourceName" value="magnolia"/>
                <param name="schemaObjectPrefix" value="version_"/>
            </PersistenceManager>
        </Versioning>
    </Repository>

  setenv: |-
    CLASSPATH="${EXTRA_LIBS}/*"
    
    CATALINA_OPTS="$CATALINA_OPTS \
     -server \
     -Djava.awt.headless=true \
     -Djava.security.egd=file:/dev/./urandom \
     -Dfile.encoding=UTF-8 \
     -Dsun.jnu.encoding=UTF-8 \
     -Duser.timezone=Europe/Zurich \
     -XX:+UseContainerSupport \
     -XX:MinRAMPercentage=${JVM_RAM_MIN_PERCENTAGE:-25} \
     -XX:MaxRAMPercentage=${JVM_RAM_MAX_PERCENTAGE:-80} \
     -XX:+UseG1GC \
     -XX:+UseStringDeduplication \
     -XX:G1ReservePercent=10 \
     -XX:ThreadStackSize=512k \
     -XX:+ExitOnOutOfMemoryError \
     -javaagent:${EXTRA_LIBS}/jmx_prometheus_javaagent.jar=8000:/jmxexporter/config.yml \
     -XshowSettings:vm"
    
    # -XX:+PrintFlagsFinal \
    
    # Magnolia settings
    CATALINA_OPTS="$CATALINA_OPTS \
     -Dmagnolia.repositories.jackrabbit.config=WEB-INF/config/repo-conf/jackrabbit.xml \
     -Dmagnolia.bootstrap.authorInstance=${MGNL_AUTHOR_INSTANCE:-true} \
     -Dmagnolia.develop=${MGNL_DEVELOPER_MODE:-false} \
     -Dmagnolia.update.auto=${MGNL_AUTO_UPDATE:-true} \
     -Dmagnolia.ui.sticker.color=${MGNL_UI_STICKER_COLOR:-blue} \
     -Dmagnolia.author.key.location=/keys/activation/magnolia-activation-keypair.properties \
     -Dmagnolia.home=${MGNL_HOME_DIR:-/mgnl-home} \
     -Dmagnolia.repositories.home=${MGNL_REPOSITORIES_HOME:-\$\{magnolia.home\}/repositories} \
     -Dmagnolia.resources.dir=${MGNL_RESOURCES_DIR:-\$\{magnolia.home\}/modules} \
     -Dmagnolia.cloud.bootstrapper.pem.file=${MGNL_HOME_DIR:-/mgnl-home}/pub.pem \
     -Dmagnolia.superuser.enabled=true"
    
    
    
    CATALINA_OPTS="$CATALINA_OPTS $CATALINA_OPTS_EXTRA"  

service:
  annotations: {}
  type: NodePort
  NodePort: 9001
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  redirectPort: 8081


nodeSelector: {}

tolerations: []

affinity: {}